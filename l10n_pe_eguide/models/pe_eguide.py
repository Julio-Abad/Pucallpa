# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
from datetime import datetime
from base64 import decodestring

class PeSunatEguide(models.Model):
    _name = 'pe.eguide'
    _inherit = 'pe.cpe.mixin'

    name = fields.Char("Name", default="/", readonly=True, states={'to_send': [('readonly', False)]})
    state = fields.Selection([('to_send', 'To Send'), ('generate','Generate'), ('to_check','To Check'), 
                              ('sent', 'Sent'), ('to_cancel', 'To Cancel'), ('cancelled', 'Cancelled')], default='to_send')
    attachment_id = fields.Many2one('ir.attachment', help='The file generated by edi_format_id when the invoice is posted (and this document is processed).', 
                                    readonly=True, states={'to_send': [('readonly', False)]})
    picking_id = fields.Many2one("stock.picking", string="Picking", states={'to_send': [('readonly', False)]}, readonly = True)
    
    def action_generate(self):
        res = super(PeSunatEguide, self).action_generate()
        for cpe in self:
            cpe.name = cpe.picking_id.pe_guide_number
            if cpe.company_id.pe_ws_server in ['nubefact_pse']:
                continue
            else:
                file_name = cpe._pe_cpe_document_name(cpe.picking_id)
                data = self.env['pe.cpe.send'].get_eguide_document(cpe)
                cpe.pe_digest = data.get('resumen', False)
                xml_content = data.get('xml_firmado')
                attachment_id = self.env['ir.attachment'].create({
                    'name': "%s.xml" % file_name,
                    'datas': xml_content,
                    'mimetype': 'application/xml'
                })
                cpe.attachment_id = attachment_id
        return res
    
    def action_sent(self):
        for cpe in self:
            cpe.pe_send_date = fields.Datetime.to_string(fields.Datetime.now())
            if not cpe.attachment_id:
                cpe.action_generate()
            data = self.env['pe.cpe.send'].send_eguide_document(cpe)
            print(data)
            if cpe.company_id.pe_ws_server in ['nubefact_pse']:
                document_name = "R-%s.zip" % cpe._pe_cpe_document_name()
                vals = cpe._pe_check_nubefact_pse_response(data.get('datos_respuesta', False) or data.get('respuesta', False), document_name)
                if vals.get('enlace'):
                    if cpe.picking_id.company_id.pe_ws_server == 'nubefact_pse':
                        response = """ <ul>
                                        <li><a target="_blank" href="%s">Enlace</a></li>
                                        <li><a target="_blank" href="%s">PDF</a></li>
                                        <li><a target="_blank" href="%s">XML</a></li>
                                        <li><a target="_blank" href="%s">CDR</a></li>
                                    </ul>""" % (vals.get('enlace'),
                                                vals.get('enlace_del_pdf', "#"),
                                                vals.get('enlace_del_xml', "#"),
                                                vals.get('enlace_del_cdr', "#"))
                        cpe.picking_id.message_post(body=_('Sending the guide electronic document succeeded.<br/>%s' % response))
                if vals.get('error'):
                    del vals['error']
                if vals.get('enlace'):
                    del vals['enlace']
                if vals.get('enlace_del_pdf'):
                    del vals['enlace_del_pdf']
                if vals.get('enlace_del_xml'):
                    del vals['enlace_del_xml']
                if vals.get('enlace_del_cdr'):
                    del vals['enlace_del_cdr']
                cpe.write(vals)
                
            if data.get('datos_respuesta'):
                document_name = "R-%s.zip" % cpe._pe_cpe_document_name(cpe.picking_id)
                pe_response_id = self.env['ir.attachment'].create({
                                     'name': "R-%s.zip" % document_name,
                                     'datas': data.get('datos_respuesta'),
                                     'mimetype': 'application/zip'
                                 })
                cpe.pe_response_id = pe_response_id
            if data.get('respuesta'):
                self._check_pe_cpe_response(data.get('respuesta'))
    
    @api.model
    def send_async_eguide(self):
        eguide_ids = self.search([('state', 'in', ['to_send'])])
        for eguide_id in eguide_ids:
            #try:
            #    cpe_id.action_document_status()
            #except Exception:
            #    pass
            if eguide_id.state != 'done':
                try:
                    cpe_id.action_generate()
                    cpe_id.action_send()
                except Exception:
                    pass
    
    @api.model
    def create_from_stock(self, picking_id):
        vals={}
        vals['picking_id']= picking_id.id
        vals['company_id']= picking_id.company_id.id
        res=self.create(vals)
        return res
    
    